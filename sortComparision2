import java.util.ArrayList;
public class CardComparison {
    public static ArrayList<Integer> cardCompare(String card1, String card2) {
        String suitOrder = "HCDS";        
        ArrayList<Integer> result = new ArrayList<>();       
        int number1 = Integer.parseInt(card1.substring(0, card1.length() - 1));
        char suit1 = card1.charAt(card1.length() - 1);      
        int number2 = Integer.parseInt(card2.substring(0, card2.length() - 1));
        char suit2 = card2.charAt(card2.length() - 1);     
        if (suitOrder.indexOf(suit1) < suitOrder.indexOf(suit2)) {
            result.add(-1);
        } else if (suitOrder.indexOf(suit1) > suitOrder.indexOf(suit2)) {
            result.add(1);
        } else {
            if (number1 < number2) {
                result.add(-1);
            } else if (number1 > number2) {
                result.add(1);
            } else {
                result.add(0);
            }
        }        
        return result;
    }
}
***********************************************************************************************************************8
import java.util.ArrayList;
import java.util.List;
int getSuitPriority(char suit) {
    switch (suit) {
        case 'H': return 1; // Hearts
        case 'C': return 2; // Clubs
        case 'D': return 3; // Diamonds
        case 'S': return 4; // Spades
        default: throw new IllegalArgumentException("Invalid suit: " + suit);
    }
}
int cardCompare(String card1, String card2) {
    char suit1 = card1.charAt(card1.length() - 1);
    int rank1 = Integer.parseInt(card1.substring(0, card1.length() - 1));
    char suit2 = card2.charAt(card2.length() - 1);
    int rank2 = Integer.parseInt(card2.substring(0, card2.length() - 1));
    int suitPriority1 = getSuitPriority(suit1);
    int suitPriority2 = getSuitPriority(suit2);
    if (suitPriority1 < suitPriority2) {
        return -1;
    } else if (suitPriority1 > suitPriority2) {
        return 1;
    }
    if (rank1 < rank2) {
        return -1;
    } else if (rank1 > rank2) {
        return 1;
    }
    return 0;
}
ArrayList<String> bubbleSort(ArrayList<String> list) {
    int n = list.size();
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (cardCompare(list.get(j), list.get(j + 1)) > 0) {
                String temp = list.get(j);
                list.set(j, list.get(j + 1));
                list.set(j + 1, temp);
            }
        }
    }
    return list;
}
ArrayList<String> mergeSort(ArrayList<String> list) {
    if (list.size() <= 1) return list;    
    int mid = list.size() / 2;
    ArrayList<String> left = new ArrayList<>(list.subList(0, mid));
    ArrayList<String> right = new ArrayList<>(list.subList(mid, list.size()));
    return merge(mergeSort(left), mergeSort(right));
}
ArrayList<String> merge(ArrayList<String> left, ArrayList<String> right) {
    ArrayList<String> merged = new ArrayList<>();
    int i = 0, j = 0;
    while (i < left.size() && j < right.size()) {
        if (cardCompare(left.get(i), right.get(j)) <= 0) {
            merged.add(left.get(i++));
        } else {
            merged.add(right.get(j++));
        }
    }
    while (i < left.size()) merged.add(left.get(i++));
    while (j < right.size()) merged.add(right.get(j++));
    return merged;
}
********************************************************************************************************************
import java.util.List;
public class SortComparison {
    public static void bubbleSort(List<String> list) {
        int n = list.size();
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - 1 - i; j++) {
                if (list.get(j).compareTo(list.get(j + 1)) > 0) {
                    String temp = list.get(j);
                    list.set(j, list.get(j + 1));
                    list.set(j + 1, temp);
                }
            }
        }
    }
    public static long measureBubbleSort(String filename) {
        try {
            List<String> lines = Files.readAllLines(Paths.get(filename));
            System.out.println("File loaded successfully. Number of lines: " + lines.size());
            long startTime = System.currentTimeMillis();
            bubbleSort(lines);
            long endTime = System.currentTimeMillis();
            return endTime - startTime;
        } catch (Exception e) {
            System.out.println("Error reading file: " + e.getMessage());
            e.printStackTrace();  
            return -1;
        }
    }
}
**********************************************************************************************************************
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
public class SortComparison {
    public static void mergeSort(List<String> list) {
        if (list.size() <= 1) {
            return;
        }
        int mid = list.size() / 2;
        List<String> left = list.subList(0, mid);
        List<String> right = list.subList(mid, list.size());
        mergeSort(left);
        mergeSort(right);
        merge(list, left, right);
    }
    private static void merge(List<String> list, List<String> left, List<String> right) {
        int i = 0, j = 0, k = 0;
        while (i < left.size() && j < right.size()) {
            if (left.get(i).compareTo(right.get(j)) <= 0) {
                list.set(k++, left.get(i++));
            } else {
                list.set(k++, right.get(j++));
            }
        }
        while (i < left.size()) {
            list.set(k++, left.get(i++));
        }
        while (j < right.size()) {
            list.set(k++, right.get(j++));
        }
    }
    public static long measureMergeSort(String filename) {
        try {
            List<String> lines = Files.readAllLines(Paths.get(filename));
            System.out.println("File loaded successfully. Number of lines: " + lines.size());
            long startTime = System.currentTimeMillis();
            mergeSort(lines);
            long endTime = System.currentTimeMillis();
            return endTime - startTime;
        } catch (Exception e) {
            System.out.println("Error reading file: " + e.getMessage());
            e.printStackTrace();  
            return -1;
        }
    }
}
***********************************************************************************************************************
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
public class SortComparison {
    public static void mergeSort(List<String> list) {
        if (list.size() <= 1) {
            return;
        }
        int mid = list.size() / 2;
        List<String> left = list.subList(0, mid);
        List<String> right = list.subList(mid, list.size());
        mergeSort(left);
        mergeSort(right);
        merge(list, left, right);
    }
    private static void merge(List<String> list, List<String> left, List<String> right) {
        int i = 0, j = 0, k = 0;
        while (i < left.size() && j < right.size()) {
            if (left.get(i).compareTo(right.get(j)) <= 0) {
                list.set(k++, left.get(i++));
            } else {
                list.set(k++, right.get(j++));
            }
        }
        while (i < left.size()) {
            list.set(k++, left.get(i++));
        }
        while (j < right.size()) {
            list.set(k++, right.get(j++));
        }
    }
    public static long measureMergeSort(String filename) {
        try {
            List<String> lines = Files.readAllLines(Paths.get(filename));
            System.out.println("File loaded successfully. Number of lines: " + lines.size());
            long startTime = System.currentTimeMillis();
            mergeSort(lines);
            long endTime = System.currentTimeMillis();
            return endTime - startTime;
        } catch (Exception e) {
            System.out.println("Error reading file: " + e.getMessage());
            e.printStackTrace();  
            return -1;
        }
    }
    public static void bubbleSort(List<String> list) {
        int n = list.size();
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - 1 - i; j++) {
                if (list.get(j).compareTo(list.get(j + 1)) > 0) {
                    String temp = list.get(j);
                    list.set(j, list.get(j + 1));
                    list.set(j + 1, temp);
                }
            }
        }
    }
    public static long measureBubbleSort(String filename) {
        try {
            List<String> lines = Files.readAllLines(Paths.get(filename));
            System.out.println("File loaded successfully. Number of lines: " + lines.size());
            long startTime = System.currentTimeMillis();
            bubbleSort(lines);
            long endTime = System.currentTimeMillis();
            return endTime - startTime;
        } catch (Exception e) {
            System.out.println("Error reading file: " + e.getMessage());
            e.printStackTrace();  
            return -1;
        }
    }
    public static void sortComparison(String[] filenames) {
        StringBuilder csvContent = new StringBuilder();
        csvContent.append(", ");
        for (String filename : filenames) {
            String fileNameWithoutExtension = filename.substring(0, filename.lastIndexOf('.'));
            csvContent.append(fileNameWithoutExtension.length()).append(", ");
        }
        csvContent.setLength(csvContent.length() - 2); 
        csvContent.append("\n");
        for (String sortType : new String[] { "bubbleSort", "mergeSort" }) {
            csvContent.append(sortType).append(", ");
            for (String filename : filenames) {
                long time = -1;
                if (sortType.equals("bubbleSort")) {
                    time = measureBubbleSort(filename);
                } else if (sortType.equals("mergeSort")) {
                    time = measureMergeSort(filename);
                }
                csvContent.append(time).append(", ");
            }
            csvContent.setLength(csvContent.length() - 2); 
            csvContent.append("\n");
        }
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("sortComparison.csv"))) {
            writer.write(csvContent.toString());
            System.out.println("Results saved to sortComparison.csv");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
